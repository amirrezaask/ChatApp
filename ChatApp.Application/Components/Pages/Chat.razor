@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Blazorise;
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>
<Modal @ref="userHandleInputRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Handle</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>your Handle</FieldLabel>
                <TextEdit @bind-Text="@handle" Placeholder="Enter your chat handle..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@SaveUserHandle">Start</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private Modal userHandleInputRef;
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? handle;
    private string? messageInput;

    private Task ShowModal() 
    {
        return userHandleInputRef.Show();
    }

    private Task SaveUserHandle()
    {
        return userHandleInputRef.Hide();
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await userHandleInputRef.Show();

    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", handle, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
