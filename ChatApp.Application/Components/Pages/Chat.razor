@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Blazorise;
@using ChatApp.Application.Entities;
@using static ChatApp.Application.Hubs.Protocol;
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>
<Modal @ref="userHandleInputRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Handle</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>your Handle</FieldLabel>
                <TextEdit @bind-Text="@handle" Placeholder="Enter your chat handle..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@Join">Join</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="errorModalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Error</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Text>There was an error connecting to the chat server.</Text>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@Join">Join</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <Card>
            <CardBody>
                <CardTitle Size="3">
                    @message.SenderHandle
                </CardTitle>
                <CardText>
                    @message.Content
                </CardText>
            </CardBody>
        </Card>
    }
</ul>

<div class="form-group">
    <Field @bind-Text="messageInput">Message:</Field>
    <input @bind="messageInput" size="50" />
</div>
<button @onclick="NewMessage" disabled="@(!IsConnected)">Send</button>


@code {
    private Modal errorModalRef;
    private Modal userHandleInputRef;
    private HubConnection? hubConnection;
    private List<Message> messages = [];
    private string? handle;
    private string? messageInput;

    private Task ShowModal()
    {
        return userHandleInputRef.Show();
    }

    private async Task Join()
    {
        await hubConnection.SendAsync(MessageTypes.Join.ToString(), handle);
        await userHandleInputRef.Hide();
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();


        hubConnection.On<Message>(MessageTypes.NewMessage.ToString(), async (message) =>
        {
            messages.Add(message);
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<UserInfo>(MessageTypes.UserInfo.ToString(), async (userInfo) =>
        {
            messages = userInfo.Messages.ToList();
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await userHandleInputRef.Show();

    }

    private async Task ShowErrorModal()
    {
        await errorModalRef.Show();
    }

    private async Task NewMessage()
    {
        if (hubConnection is null) await ShowErrorModal();

        await hubConnection!.SendAsync(MessageTypes.NewMessage.ToString(), new Message
        {
            Content = messageInput,
        });
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is null) return;
        await hubConnection.SendAsync(MessageTypes.Offline.ToString());
        await hubConnection.DisposeAsync();
    }
}
